package forge.game;

import com.google.common.collect.*;
import forge.GameCommand;
import forge.game.card.*;
import forge.game.combat.Combat;
import forge.game.config.Configuration;
import forge.game.event.Event;
import forge.game.phase.Phase;
import forge.game.phase.PhaseHandler;
import forge.game.phase.Untap;
import forge.game.player.*;
import forge.game.replacement.ReplacementHandler;
import forge.game.spellability.SpellAbility;
import forge.game.trigger.TriggerHandler;
import forge.game.zone.CostPaymentStack;
import forge.game.zone.MagicStack;
import forge.game.zone.Zone;
import forge.game.zone.ZoneType;
import forge.trackable.Tracker;
import forge.util.Visitor;
import org.apache.commons.lang3.tuple.Pair;

import java.util.*;

public interface IGame {
        Boolean getDayTime();
        Card findById(int id);
        Card findByView(CardView view);
        Card getCardState(Card card);
        Card getCardState(Card card, Card notFound);
        Card getTopLibForPlayer(Player P);
        CardCollectionView copyLastState(ZoneType type);
        CardCollectionView copyLastStateBattlefield();
        CardCollectionView copyLastStateGraveyard();
        CardCollectionView getCardsIn(Iterable<ZoneType> zones);
        CardCollectionView getCardsInGame();
        CardCollectionView getCardsInOwnedBy(Iterable<ZoneType> zones, Player p);
        CardCollectionView getCardsIncludePhasingIn(ZoneType zone);
        CardCollectionView getCardsPlayerCanActivateInStack();
        CardCollectionView getColoredCardsInPlay(String color);
        CardCollectionView getLastStateBattlefield();
        CardCollectionView getLastStateGraveyard();
        CardZoneTable getUntilHostLeavesPlayTriggerList();
        GameRules getRules();
        GameStage getAge();
        GameView getView();
        List<Card> getActivePlanes();
        List<Card> getLeftBattlefieldThisTurn();
        List<Card> getLeftGraveyardThisTurn() ;
        List<Integer> getDamageDoneThisTurn(Boolean isCombat, boolean anyIsEnough, String validSourceCard, String validTargetEntity, Card source, Player sourceController, CardTraitBase ctb);
        Multimap<Player, Card> chooseCardsForAnte(boolean matchRarity);
        Pair<Card, GameEntity> getDamageLKI(Pair<Integer, Boolean> dmg);
        Player getControlVote();
        Player getHasInitiative();
        Player getMonarch();
        Player getMonarchBeginTurn();
        Player getNextPlayerAfter(Player playerTurn);
        Player getNextPlayerAfter(Player playerTurn, Direction turnOrder);
        Player getPlayer(int id);
        Player getPlayer(PlayerView playerView);
        Player getStartingPlayer();
        ReplacementHandler getReplacementHandler();
        Tracker getTracker();
        Zone getZoneOf(Card card);
        boolean isCardExiled(Card c);
        boolean isCardInCommand(String cardName);
        boolean isCardInPlay(String cardName);
        boolean isDay();
        boolean isGraveyardOrdered(Player p);
        boolean isNeitherDayNorNight();
        boolean isNight();
        boolean restoreGameState();
        Card getChangeZoneLKIInfo(Card c);
        Combat getCombat();
        Direction getTurnOrder();
        IGame getMaingame();
        GameAction getAction();
        GameLog getGameLog();
        GameOutcome getOutcome();
        MagicStack getStack();
        Match getMatch();
        Phase getCleanup();
        Phase getEndOfCombat();
        Phase getEndOfTurn();
        Phase getUpkeep();
        PhaseHandler getPhaseHandler();
        PlayerCollection getLostPlayers();
        PlayerCollection getNonactivePlayers();
        PlayerCollection getPlayers();
        PlayerCollection getPlayersInTurnOrder();
        PlayerCollection getPlayersInTurnOrder(Player p);
        PlayerCollection getRegisteredPlayers();
        StaticEffects getStaticEffects();
        TriggerHandler getTriggerHandler();
        Untap getUntap();
        Zone getStackZone();
        long getNextTimestamp();
        long getTimestamp();
        void addChangeZoneLKIInfo(Card lki);
        void clearChangeZoneLKIInfo();
        void resetTurnOrder();
        void reverseTurnOrder();
        void runSBACheckedCommands();
        void updateCombatForView();
        void updateGameLogForView();
        void updatePhaseForView();
        void updatePlayerTurnForView();
        void updateStackForView();
        void updateTurnForView();
        int getCounterAddedThisTurn(CounterType cType, Card card);
        int getCounterAddedThisTurn(CounterType cType, String validPlayer, String validCard, Card source, Player sourceController, CardTraitBase ctb);
        int getCounterRemovedThisTurn(CounterType cType, String valid, Card source, Player sourceController, CardTraitBase ctb);
        int getId();
        int getNumPiledGuessedSA();
        int getPosition(Player player, Player startingPlayer);
        int nextCardId();
        int nextHiddenCardId();
        CardCollectionView getCardsIn(ZoneType zone);
        boolean isGameOver();
        void setGameOver(GameEndReason reason);
        void addCounterAddedThisTurn(Player putter, CounterType cType, Card card, Integer value);
        void addCounterRemovedThisTurn(CounterType cType, Card card, Integer value);
        void addCounterRemovedThisTurn(CounterType cType, Player player, Integer value);
        void addFacedownWhileCasting(Card c, int numDrawn);
        void addGlobalDamageHistory(CardDamageHistory cdh, Pair<Integer, Boolean> dmg, Card source, GameEntity target);
        void addLeftBattlefieldThisTurn(Card lki);
        void addLeftGraveyardThisTurn(Card lki);
        void addPlayer(int id, Player player);
        void addSBACheckedCommand(GameCommand c);
        void clearCaches();
        void clearCounterAddedThisTurn();
        void clearCounterRemovedThisTurn();
        void clearGlobalDamageHistory();
        void clearLeftBattlefieldThisTurn();
        void clearLeftGraveyardThisTurn();
        void clearTopLibsCast(SpellAbility sa);
        void copyLastState();
        void dangerouslySetTimestamp(long timestamp);
        void fireEvent(Event event);
        void forEachCardInGame(Visitor<Card> visitor);
        void forEachCardInGame(Visitor<Card> visitor, boolean withSideboard);
        void incPiledGuessedSA();
        void onCleanupPhase();
        void onPlayerLost(Player p);
        void resetNumPiledGuessedSA();
        void setActivePlanes(List<Card> activePlane0);
        void setAge(GameStage value);
        void setDayTime(Boolean value);
        void setHasInitiative(Player p);
        void setMonarch(Player p);
        void setMonarchBeginTurn(Player monarchBeginTurn);
        void setStartingPlayer(Player p);
        void setTopLibsCast();
        void stashGameState();
        void subscribeToEvents(Object subscriber);
        void updateLastStateForCard(Card c);
        CostPaymentStack costPaymentStack();
        Configuration configuration();
        void setConfiguration(Configuration configuration);

        MagicStack stack();
}